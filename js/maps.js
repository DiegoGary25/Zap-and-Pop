(function () {
  'use strict';
  const root = document.documentElement;
  const key = Symbol.for('zap-registry');
  const modules = root[key] || (root[key] = Object.create(null));
  if (!modules.maps) {
    const { DIMENSIONS } = modules.constants;
    const tile = DIMENSIONS.tile;
    const templates = Object.freeze([
      [
        '##############################',
        '#............##............###',
        '#............##............###',
        '#.........................####',
        '#..----..............----..###',
        '#............##............###',
        '#.....####............####..##',
        '#..........................###',
        '#..----..............----..###',
        '#............##............###',
        '#............##............###',
        '#..........................###',
        '#......####........####.....##',
        '#..........................###',
        '#............##............###',
        '##############################'
      ],
      [
        '##############################',
        '#..........................###',
        '#..####............####....###',
        '#..........................###',
        '#....----......--......----.##',
        '#..........................###',
        '#............####............#',
        '#..........................###',
        '#..####............####....###',
        '#..........................###',
        '#....----......--......----.##',
        '#..........................###',
        '#............####............#',
        '#..........................###',
        '#..........................###',
        '##############################'
      ],
      [
        '##############################',
        '#.............##............##',
        '#.............##............##',
        '#..----................----..#',
        '#............................#',
        '#....######........######....#',
        '#............................#',
        '#............####............#',
        '#............................#',
        '#....######........######....#',
        '#............................#',
        '#..----................----..#',
        '#.............##............##',
        '#.............##............##',
        '#............................#',
        '##############################'
      ],
      [
        '##############################',
        '#............................#',
        '#....####............####....#',
        '#............................#',
        '#..----......####......----..#',
        '#............................#',
        '#............----............#',
        '#............................#',
        '#....####............####....#',
        '#............................#',
        '#..----......####......----..#',
        '#............................#',
        '#............----............#',
        '#............................#',
        '#............................#',
        '##############################'
      ],
      [
        '##############################',
        '#............................#',
        '#............................#',
        '#..----............----......#',
        '#........####..####........#.#',
        '#............................#',
        '#.....####........####......#',
        '#............................#',
        '#..----............----......#',
        '#............................#',
        '#........####..####........#.#',
        '#............................#',
        '#.....####........####......#',
        '#............................#',
        '#............................#',
        '##############################'
      ]
    ]);
    const parseMap = (lines) => {
      const rows = lines.length;
      const cols = lines[0].length;
      const solids = [];
      const oneWays = [];
      const entrances = [];
      const offsetY = (DIMENSIONS.height - rows * tile) * 0.5;
      const offsetX = (DIMENSIONS.width - cols * tile) * 0.5;
      for (let y = 0; y < rows; y += 1) {
        for (let x = 0; x < cols; x += 1) {
          const symbol = lines[y][x];
          const rect = { x: offsetX + x * tile, y: offsetY + y * tile, w: tile, h: tile };
          if (symbol === '#') {
            solids.push(rect);
          } else if (symbol === '-') {
            oneWays.push({ x: rect.x, y: rect.y, w: rect.w, h: rect.h * 0.4 });
          } else if (symbol === '.') {
            // empty
          }
        }
      }
      entrances.push(
        { x: offsetX + 1, y: offsetY + tile * 2, w: tile * 0.8, h: tile * 0.8, direction: 'right' },
        { x: DIMENSIONS.width - offsetX - tile * 1.8, y: offsetY + tile * 2, w: tile * 0.8, h: tile * 0.8, direction: 'left' },
        { x: DIMENSIONS.width * 0.5 - tile * 0.5, y: offsetY + tile * 0.5, w: tile, h: tile, direction: 'down' }
      );
      return Object.freeze({ lines, solids: Object.freeze(solids), oneWays: Object.freeze(oneWays), entrances: Object.freeze(entrances) });
    };
    const maps = templates.map(parseMap);
    modules.maps = Object.freeze({ maps });
  }
})();
